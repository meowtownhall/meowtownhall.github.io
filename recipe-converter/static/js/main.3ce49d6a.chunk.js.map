{"version":3,"sources":["../../reconv-domain/src/index.js","../../reconv-domain/src/convertIngredient.js","../../reconv-domain/src/parseIngredient.js","Ingredient.js","IngredientList.js","IngredientListInput.js","DefinitionInput.js","App.js","serviceWorker.js","index.js"],"names":["_require2","__webpack_require__","_slicedToArray","convertIngredient","convertIngredientError","parseIngredient","defaultUnitDefinitions","defaultIngredientDefinitions","module","exports","Fraction","DIVIDE_BY_ZERO","BAD_FORMAT","BAD_DEFINITION","UNRECOGNIZED","ingredient","ingredient_definitions","unit_definitions","arguments","length","quantityFraction","resolvedUnit","find","unit_defintion","unit","resolvedIngredient","ingredient_definition","name","errors","quantity","e","DivisionByZero","InvalidParameter","attribute","mL","isNaN","density","success","result","mul","round","toString","string","re","matches","exec","errorMessage","Ingredient","props","classNames","unitNotFound","ingredientNotFound","badQuantity","badUnitDefinition","badIngredientDefinition","react_default","a","createElement","className","MalformedIngredient","IngredientList","ingredients","lines","split","map","line","i","parseResult","parsedIngredient","convertResult","ingredientDefinitions","unitDefinitions","Ingredient_Ingredient","key","IngredientListInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","event","setState","target","spellCheck","onChange","IngredientList_IngredientList","React","Component","DefinitionInput","handleUnitDefinitionChange","handleIngredientDefinitionChange","_line$split","_line$split2","slicedToArray","Number","parseFloat","_line$split3","_line$split4","IngredientListInput_IngredientListInput","deserializeIngredientDefinitions","deserializeUnitDefinitions","App","join","DefinitionInput_DefinitionInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ce49d6a.chunk.js","sourcesContent":["var _slicedToArray = require(\"/Users/max/Projects/js/reconv/reconv/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _require = require('./convertIngredient'),\n    _require2 = _slicedToArray(_require, 2),\n    convertIngredient = _require2[0],\n    convertIngredientError = _require2[1];\n\nvar parseIngredient = require('./parseIngredient');\n\nvar defaultUnitDefinitions = require('../data/units');\n\nvar defaultIngredientDefinitions = require('../data/ingredients');\n\nmodule.exports = {\n  convertIngredient: convertIngredient,\n  convertIngredientError: convertIngredientError,\n  parseIngredient: parseIngredient,\n  defaultUnitDefinitions: defaultUnitDefinitions,\n  defaultIngredientDefinitions: defaultIngredientDefinitions\n};","var Fraction = require('fraction.js');\n\nvar defaultUnitDefinitions = require('../data/units');\n\nvar defaultIngredientDefinitions = require('../data/ingredients');\n\nvar convertIngredientError = {\n  DIVIDE_BY_ZERO: \"divide_by_zero\",\n  BAD_FORMAT: \"bad_format\",\n  BAD_DEFINITION: \"bad_definition\",\n  UNRECOGNIZED: \"unrecognized\"\n};\n\nfunction convertIngredient(ingredient, ingredient_definitions, unit_definitions) {\n  if (arguments.length === 1) {\n    ingredient_definitions = defaultIngredientDefinitions;\n    unit_definitions = defaultUnitDefinitions;\n  }\n\n  if (arguments.length === 2) {\n    unit_definitions = defaultUnitDefinitions;\n  }\n\n  var resolvedUnit = unit_definitions.find(function (unit_defintion) {\n    return unit_defintion.unit === ingredient.unit;\n  });\n  var resolvedIngredient = ingredient_definitions.find(function (ingredient_definition) {\n    return ingredient_definition.name === ingredient.name;\n  });\n  var errors = {};\n  var quantityFraction;\n\n  try {\n    quantityFraction = Fraction(ingredient.quantity);\n  } catch (e) {\n    if (e instanceof Fraction.DivisionByZero) {\n      errors.quantity = convertIngredientError.DIVIDE_BY_ZERO;\n    } else if (e instanceof Fraction.InvalidParameter) {\n      errors.quantity = convertIngredientError.BAD_FORMAT;\n    } else {\n      throw e;\n    }\n  }\n\n  if (!resolvedUnit) {\n    errors.unit = convertIngredientError.UNRECOGNIZED;\n  } else if (typeof resolvedUnit.mL !== 'number' || isNaN(resolvedUnit.mL)) {\n    errors.unit = convertIngredientError.BAD_DEFINITION;\n  }\n\n  if (!resolvedIngredient) {\n    errors.ingredient = convertIngredientError.UNRECOGNIZED;\n  } else if (typeof resolvedIngredient.density !== 'number' || isNaN(resolvedIngredient.density)) {\n    errors.ingredient = convertIngredientError.BAD_DEFINITION;\n  }\n\n  for (var attribute in errors) {\n    if (errors[attribute]) {\n      return {\n        success: false,\n        errors: errors\n      };\n    }\n  }\n\n  var convertedQuantity = quantityFraction.mul(resolvedIngredient.density).mul(resolvedUnit.mL).round().toString();\n  return {\n    success: true,\n    result: {\n      quantity: convertedQuantity,\n      unit: \"g\",\n      name: resolvedIngredient.name\n    }\n  };\n}\n\nmodule.exports = [convertIngredient, convertIngredientError];","function parseIngredient(string) {\n  var re = /^((?:\\d+ )?\\d+[/.]?\\d*)([A-z]+) +(.+)$/;\n  var matches = re.exec(string);\n\n  if (matches != null) {\n    return {\n      success: true,\n      result: {\n        quantity: matches[1],\n        unit: matches[2],\n        name: matches[3]\n      }\n    };\n  } else {\n    return {\n      success: false,\n      errorMessage: 'provided string \"' + string + '\" cannot be parsed with regex ' + re\n    };\n  }\n}\n\nmodule.exports = parseIngredient;","import React from 'react';\nimport './Ingredient.css';\n\nexport function Ingredient(props) {\n  let classNames = \"ingredient\";\n  if (props.errors) {\n    if (props.errors.unitNotFound) {\n      classNames += \" ingredient--unit-not-found\";\n    }\n    if (props.errors.ingredientNotFound) {\n      classNames += \" ingredient--ingredient-not-found\";\n    }\n    if (props.errors.badQuantity) {\n      classNames += \" ingredient--bad-quantity\";\n    }\n    if (props.errors.badUnitDefinition) {\n      classNames += \" ingredient--bad-unit-definition\";\n    }\n    if (props.errors.badIngredientDefinition) {\n      classNames += \" ingredient--bad-ingredient-definition\";\n    }\n  }\n\n  return (\n    <div className={classNames}>\n      <span className=\"ingredient-quantity\">{props.quantity}</span><span className=\"ingredient-unit\">{props.unit}</span> <span className=\"ingredient-name\">{props.name}</span>\n    </div>\n  );\n}\n\nexport function MalformedIngredient(props) {\n  return (\n    <div className=\"ingredient\">\n      <span className=\"ingredient--malformed\">{props.string}</span>\n    </div>\n  );\n}\n","import React from 'react';\nimport {Ingredient, MalformedIngredient} from './Ingredient.js';\nimport { parseIngredient, convertIngredient, convertIngredientError } from 'reconv-domain';\nimport \"./IngredientList.css\";\n\nexport default function IngredientList(props) {\n  const lines = props.lines;\n\n  const ingredients = lines.split(\"\\n\").map((line, i) => {\n    const parseResult = parseIngredient(line);\n    if (parseResult.success) {\n      let ingredient;\n      const parsedIngredient = parseResult.result;\n      const convertResult = convertIngredient(parsedIngredient, props.ingredientDefinitions, props.unitDefinitions);\n      if (convertResult.success) {\n        ingredient = convertResult.result;\n      } else {\n        const errors = convertResult.errors;\n\n        ingredient = {\n          quantity: parsedIngredient.quantity,\n          unit: parsedIngredient.unit,\n          name: parsedIngredient.name,\n          errors: {\n            unitNotFound: errors.unit === convertIngredientError.UNRECOGNIZED,\n            ingredientNotFound: errors.ingredient === convertIngredientError.UNRECOGNIZED,\n            badQuantity: errors.quantity, // no need to distinguish between BAD_FORMAT and DIVIDE_BY_ZERO yet\n            badUnitDefinition: errors.unit === convertIngredientError.BAD_DEFINITION,\n            badIngredientDefinition: errors.ingredient === convertIngredientError.BAD_DEFINITION,\n          }\n        }\n      }\n      return <Ingredient\n        key={i}\n        quantity={ingredient.quantity}\n        unit={ingredient.unit}\n        name={ingredient.name}\n        errors={ingredient.errors}\n        />;\n    } else {\n      return <MalformedIngredient key={i} string={line} />;\n    }\n  });\n\n  return (\n    <div className=\"ingredient-list\">\n      {ingredients}\n    </div>\n  );\n}\n\n","import React from 'react';\nimport \"./IngredientListInput.css\";\nimport IngredientList from './IngredientList.js';\n\nexport default class IngredientListInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"ingredient-list-input\">\n        <div className=\"recipe-input\">\n          <h2>Recipe</h2>\n          <textarea spellCheck=\"false\" value={this.state.value} onChange={this.handleChange} />\n        </div>\n        <div className=\"recipe-output\">\n          <h2>Converted Recipe</h2>\n          <IngredientList lines={this.state.value} ingredientDefinitions={this.props.ingredientDefinitions} unitDefinitions={this.props.unitDefinitions} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport IngredientListInput from './IngredientListInput.js';\nimport \"./DefinitionInput.css\";\n\nexport default class DefinitionInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      unitDefinitions: props.unitDefinitions,\n      ingredientDefinitions: props.ingredientDefinitions,\n    };\n\n    this.handleUnitDefinitionChange = this.handleUnitDefinitionChange.bind(this);\n    this.handleIngredientDefinitionChange = this.handleIngredientDefinitionChange.bind(this);\n  }\n\n  handleUnitDefinitionChange(event) {\n    this.setState({unitDefinitions: event.target.value});\n  }\n\n  handleIngredientDefinitionChange(event) {\n    this.setState({ingredientDefinitions: event.target.value});\n  }\n\n  deserializeUnitDefinitions(string) {\n    return string.split(\"\\n\").map(line => {\n      let [unit, mL] = line.split(\",\");\n      mL = Number.parseFloat(mL, 10);\n      return { unit, mL };\n    });\n  }\n\n  deserializeIngredientDefinitions(string) {\n    return string.split(\"\\n\").map(line => {\n      let [name, density] = line.split(\",\");\n      density = Number.parseFloat(density, 10);\n      return { name, density };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"definition-input\">\n        <div className=\"unit-definition-input\">\n          <h2>Unit definitions</h2>\n          <p className=\"definition-format-example\">unit,mL</p>\n          <textarea spellCheck=\"false\" value={this.state.unitDefinitions} onChange={this.handleUnitDefinitionChange} />\n        </div>\n\n        <div className=\"ingredient-definition-input\">\n          <h2>Ingredient definitions</h2>\n          <p className=\"definition-format-example\">ingredient,density</p>\n          <textarea spellCheck=\"false\" value={this.state.ingredientDefinitions} onChange={this.handleIngredientDefinitionChange} />\n        </div>\n\n        <IngredientListInput\n        value={this.props.lines}\n        ingredientDefinitions={this.deserializeIngredientDefinitions(this.state.ingredientDefinitions)}\n        unitDefinitions={this.deserializeUnitDefinitions(this.state.unitDefinitions)}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport DefinitionInput from './DefinitionInput';\nimport { defaultIngredientDefinitions, defaultUnitDefinitions } from 'reconv-domain';\n\nclass App extends Component {\n  render() {\n\n    let ingredientDefinitions = defaultIngredientDefinitions.map( (ingredient) => { return ingredient.name + \",\" + ingredient.density }).join(\"\\n\");\n    let unitDefinitions = defaultUnitDefinitions.map( (unit) => { return unit.unit + \",\" + unit.mL }).join(\"\\n\");\n\n    let lines = \"1/2c butter\\n1.2c water\\n1c malk\\n1x butter\\n1/0c water\\n1BAD_DEFN water\\n1c BAD_DEFN\\nnonsense\";\n\n    return (\n      <div>\n        <h1>Recipe Converter</h1>\n        <DefinitionInput lines={lines} ingredientDefinitions={ingredientDefinitions} unitDefinitions={unitDefinitions} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/normalize.css';\nimport './styles/base.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}